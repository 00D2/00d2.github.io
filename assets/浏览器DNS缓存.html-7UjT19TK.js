import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as t,o as e}from"./app-Csje0Z0t.js";const n={};function s(o,i){return e(),l("div",null,i[0]||(i[0]=[t('<h2 id="基础测试环境" tabindex="-1"><a class="header-anchor" href="#基础测试环境"><span>基础测试环境</span></a></h2><ul><li><p>操作系统</p><ul><li>Windows 7</li></ul></li><li><p>抓包工具</p><ul><li>Wireshark</li></ul></li><li><p>浏览器</p><ul><li>IE8</li><li>Chrome59</li><li>Chrome69</li></ul></li><li><p>DNS服务器配置</p><ul><li>根据不同场景，调整NS、A等记录的TTL值</li></ul></li></ul><p>备注：</p><blockquote><p>每次新场景测试前，均清除缓存。</p><ul><li>关闭浏览器，清除缓存</li><li>使用ipconfig /flushdns清除系统DNS缓存</li><li>通过ipconfig /displaydns确认系统当前无相关DNS缓存记录</li></ul></blockquote><h2 id="测试结论" tabindex="-1"><a class="header-anchor" href="#测试结论"><span>测试结论</span></a></h2><table><thead><tr><th>浏览器</th><th>是否有独立缓存|缓存时间</th><th>是否读取操作系统缓存</th><th>操作系统缓存生成依据</th></tr></thead><tbody><tr><td>Chrome59</td><td>是|60秒</td><td>是</td><td>域名所在域的NS记录TTL值</td></tr><tr><td>Chrome69</td><td>否|根据A记录的TTL值，单位毫秒</td><td>否</td><td>无</td></tr><tr><td>Chrome99</td><td></td><td></td><td></td></tr><tr><td>IE8</td><td>未知|官方提供时间为30分钟</td><td>是</td><td>待测试</td></tr><tr><td>IE11</td><td>未知|官方提供时间为30分钟</td><td>是</td><td>待测试</td></tr></tbody></table><h2 id="场景一-chrome-59" tabindex="-1"><a class="header-anchor" href="#场景一-chrome-59"><span>场景一：Chrome 59</span></a></h2><h3 id="测试结论-1" tabindex="-1"><a class="header-anchor" href="#测试结论-1"><span>测试结论</span></a></h3><h3 id="_1-1-首次访问" tabindex="-1"><a class="header-anchor" href="#_1-1-首次访问"><span>1.1 首次访问</span></a></h3><h4 id="测试过程" tabindex="-1"><a class="header-anchor" href="#测试过程"><span>测试过程</span></a></h4><ol><li><p>通过浏览器打开http://a1.test.com，进行访问；</p></li><li><p>通过Wireshark抓包工具确认，客户端向DNS服务器发起了DNS请求，并获取到了相应记录；</p></li><li><p>通过DNS服务器tail log确认，服务端收到了客户端请求，并返回相应记录值；</p></li><li><p>通过ipconfig /displaydns查看，系统出现了t1.test.com的DNS缓存；</p></li><li><p>通过chrome浏览器chrome://net-internals#dns，查看浏览器对于域名的缓存记录及时间。</p><img src="https://img.jinguo.tk/api/image/image-20220616150110691.png" alt="系统DNS缓存" style="zoom:33%;"><img src="https://img.jinguo.tk/api/image/image-20220616151459880.png" alt="image-20220616151459880" style="zoom:33%;"><img src="https://img.jinguo.tk/api/image/image-20220616150034251.png" alt="image-20220616150034251" style="zoom:33%;"></li></ol><h4 id="测试结果" tabindex="-1"><a class="header-anchor" href="#测试结果"><span>测试结果</span></a></h4><ol><li><p><strong>客户端向服务器发起DNS请求，浏览器及操作系统分别会生成各自的缓存记录。</strong></p></li><li><p><strong>浏览器缓存时间为60S</strong></p></li><li><p><strong>操作系统读取NS记录的TTL值，并非具体A记录的TTL值。</strong></p></li></ol><h3 id="_1-2-在浏览器dns-ttl超时时间内刷新或打开新的tab" tabindex="-1"><a class="header-anchor" href="#_1-2-在浏览器dns-ttl超时时间内刷新或打开新的tab"><span>1.2 在浏览器DNS TTL超时时间内刷新或打开新的TAB</span></a></h3><h4 id="测试过程-1" tabindex="-1"><a class="header-anchor" href="#测试过程-1"><span>测试过程</span></a></h4><blockquote><ol><li>通过Wireshark抓包工具确认，客户端未发起新的DNS请求；</li><li>通过DNS服务器tail log确认，服务端未收到新的DNS请求；</li><li>通过ipconfig /displaydns查看，系统中t1.test.com的DNS缓存TTL值仍使用上次使用的TTL倒计时；</li><li>通过chrome浏览器chrome://net-internals#dns，查看浏览器对于域名的缓存记录及时间。</li></ol></blockquote><h4 id="测试结果-1" tabindex="-1"><a class="header-anchor" href="#测试结果-1"><span>测试结果</span></a></h4><ol><li><strong>浏览器读取自身的DNS缓存，不会发起新的DNS请求。</strong></li></ol><h3 id="_1-3-浏览器dns-ttl超时-系统dns-ttl未超时-刷新或打开新的tab" tabindex="-1"><a class="header-anchor" href="#_1-3-浏览器dns-ttl超时-系统dns-ttl未超时-刷新或打开新的tab"><span>1.3 浏览器DNS TTL超时，系统DNS TTL未超时，刷新或打开新的TAB</span></a></h3><h4 id="测试过程-2" tabindex="-1"><a class="header-anchor" href="#测试过程-2"><span>测试过程</span></a></h4><blockquote><ol><li>通过Wireshark抓包工具确认，客户端未发起新的DNS请求；</li><li>通过DNS服务器tail log确认，服务端未收到新的DNS请求；</li><li>通过ipconfig /displaydns查看，系统中t1.test.com的DNS缓存TTL值仍使用上次使用的TTL倒计时；</li><li>通过chrome浏览器chrome://net-internals#dns，查看浏览器对于域名的缓存记录及时间。</li></ol></blockquote><h4 id="追加测试" tabindex="-1"><a class="header-anchor" href="#追加测试"><span>追加测试</span></a></h4><blockquote><p>通过ping命令，先在操作系统中生成相应域名的缓存；</p><p>再次打开浏览器访问</p><p>并通过Wireshark抓包，进行确认有无向DNS服务器发起请求。</p></blockquote><p>####　测试结论</p><ol><li><strong>浏览器读取操作系统的DNS缓存，不会向DNS服务器发起新的请求。</strong></li></ol><h3 id="_1-4-浏览器及系统dns-ttl均超时-刷新或打开新的tab" tabindex="-1"><a class="header-anchor" href="#_1-4-浏览器及系统dns-ttl均超时-刷新或打开新的tab"><span>1.4 浏览器及系统DNS TTL均超时，刷新或打开新的TAB</span></a></h3><p>####　测试结论</p><ol><li><strong>客户端向DNS服务器发起新的请求。</strong></li></ol><h4 id="测试过程-3" tabindex="-1"><a class="header-anchor" href="#测试过程-3"><span>测试过程</span></a></h4><blockquote><ol><li>通过Wireshark抓包工具确认，客户端未发起新的DNS请求；</li><li>通过DNS服务器tail log确认，服务端未收到新的DNS请求；</li><li>通过ipconfig /displaydns查看，系统中t1.test.com的DNS缓存TTL值仍使用上次使用的TTL倒计时；</li><li>通过chrome浏览器chrome://net-internals#dns，查看浏览器对于域名的缓存记录及时间。</li></ol></blockquote><h2 id="场景二-chrome-69" tabindex="-1"><a class="header-anchor" href="#场景二-chrome-69"><span>场景二 Chrome 69</span></a></h2><h3 id="测试结论-2" tabindex="-1"><a class="header-anchor" href="#测试结论-2"><span>测试结论</span></a></h3><ol><li><strong>浏览器会根据DNS服务器上具体的A记录条目所配置的TTL值，自身进行缓存，可通过chrome://net-internals#dns进行查看。（注意：此处显示的TTL时间为毫秒，换算成秒需/1000）</strong></li><li><strong>浏览器在进行DNS请求时，相应的请求不会在操作系统中生成缓存。</strong></li><li><strong>浏览器在TTL超时时间内，通过刷新键或f5键进行刷新，均会触发DNS重新请求的动作，同时更新自身的缓存时间。</strong></li><li><strong>正常的页面点击、上传及下载文件、页面自动在新的标签页中打开预览文件等操作，不会触发DNS更新。</strong></li><li><strong>浏览器TTL超时后，浏览器会重新发起DNS请求。</strong></li><li><strong>浏览器最大可记录的缓存时间为2147483秒，如果DNS服务器配置的TTL时间超过该值，浏览器生成表项时的值可能为负值，也可能是50065408。</strong><ul><li>可通过下面两个图片中t4、t5两条记录，在浏览器中生成的缓存条目。</li></ul></li></ol><p><img src="https://img.jinguo.tk/api/image/image-20220617100345995.png" alt="image-20220617100345995"></p><p><img src="https://img.jinguo.tk/api/image/image-20220617100424983.png" alt="image-20220617100424983"></p><img src="https://img.jinguo.tk/api/image/image-20220617101854135.png" alt="image-20220617101854135" style="zoom:33%;"><p><a href="https://icode.best/i/17938839070875" target="_blank" rel="noopener noreferrer">链接1</a></p><p><a href="https://www.runoob.com/cplusplus/cpp-data-types.html" target="_blank" rel="noopener noreferrer">链接2</a></p><h3 id="_2-1-首次访问" tabindex="-1"><a class="header-anchor" href="#_2-1-首次访问"><span>2.1 首次访问</span></a></h3><h4 id="测试过程-4" tabindex="-1"><a class="header-anchor" href="#测试过程-4"><span>测试过程</span></a></h4><blockquote><ol><li><p>通过浏览器打开http://a2.test.com，进行访问；</p></li><li><p>通过Wireshark抓包工具确认，客户端向DNS服务器发起了DNS请求，并获取到了相应记录；</p></li><li><p>通过DNS服务器tail log确认，服务端收到了客户端请求，并返回相应记录值；</p></li><li><p>通过ipconfig /displaydns查看，系统没有t2.test.com的DNS缓存；</p></li><li><p>通过chrome浏览器chrome://net-internals#dns，查看浏览器对于域名的缓存记录及时间。</p></li></ol></blockquote><img src="https://img.jinguo.tk/api/image/image-20220616161337757.png" alt="image-20220616161337757" style="zoom:33%;"><h4 id="测试结果-2" tabindex="-1"><a class="header-anchor" href="#测试结果-2"><span>测试结果</span></a></h4><ol><li>客户端向服务器发起DNS请求，浏览器会生成缓存记录，但操作系统不会生成缓存记录。</li><li>浏览器缓存时间根据DNS上对应的A记录条目的TTL值生成。</li></ol><h3 id="_2-2-在浏览器dns-ttl超时时间内刷新或打开新的tab" tabindex="-1"><a class="header-anchor" href="#_2-2-在浏览器dns-ttl超时时间内刷新或打开新的tab"><span>2.2 在浏览器DNS TTL超时时间内刷新或打开新的TAB</span></a></h3><h4 id="测试过程-5" tabindex="-1"><a class="header-anchor" href="#测试过程-5"><span>测试过程</span></a></h4><blockquote><ol><li>通过Wireshark抓包工具确认，客户端发起新的DNS请求；</li><li>通过DNS服务器tail log确认，服务端收到新的DNS请求；</li><li>通过ipconfig /displaydns查看，系统中无a2.test.com的DNS缓存；</li><li>通过chrome浏览器chrome://net-internals#dns，查看浏览器对于域名的缓存记录及时间发生变化。</li></ol></blockquote><h4 id="测试结果-3" tabindex="-1"><a class="header-anchor" href="#测试结果-3"><span>测试结果</span></a></h4><ol><li>浏览器发生了刷新动作（无论是普通刷新或者是强制刷新）时，均会触发重新请求DNS的动作，请求成功后，浏览器会更新自身的缓存时间。</li></ol><h3 id="_2-3-浏览器ttl超时-刷新或打开新的tab" tabindex="-1"><a class="header-anchor" href="#_2-3-浏览器ttl超时-刷新或打开新的tab"><span>2.3 浏览器TTL超时，刷新或打开新的TAB</span></a></h3><h4 id="测试过程-6" tabindex="-1"><a class="header-anchor" href="#测试过程-6"><span>测试过程</span></a></h4><blockquote><ol><li>通过Wireshark抓包工具确认，客户端发起新的DNS请求；</li><li>通过DNS服务器tail log确认，服务端收到新的DNS请求；</li><li>通过ipconfig /displaydns查看，系统中无a2.test.com的DNS缓存；</li><li>通过chrome浏览器chrome://net-internals#dns，查看浏览器对于域名的缓存记录及时间发生变化。</li></ol></blockquote><p>####　测试结果</p><ol><li>客户端重新请求DNS，请求成功后，浏览器更新自身的缓存时间。</li></ol><h2 id="场景三-ie8" tabindex="-1"><a class="header-anchor" href="#场景三-ie8"><span>场景三 IE8</span></a></h2><h3 id="测试结论-3" tabindex="-1"><a class="header-anchor" href="#测试结论-3"><span>测试结论</span></a></h3><ol><li>浏览器在进行DNS请求时，操作系统会根据DNS服务器上所配置的NS记录的TTL值进行A记录的缓存。</li><li>在某个时间范围内，在浏览器上所进行的所有操作（包括<code>ctrl + f5</code>进行强制刷新）。</li><li>在操作系统上具体A记录的TTL超时后，浏览器仍可正常访问，证明IE浏览器同样具备自身的DNS缓存。</li><li>如果目的界面可以正常打开，浏览器会自身缓存30min，如果目的地址不可达，那么浏览器可能会在30min内发起新的DNS请求。</li></ol><h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h3><ol><li><p>IE浏览器未找到查看浏览器自身存放及展示DNS缓存的页面。</p></li><li><p>据微软支持网站显示，在IE4.x及后续版本，会对相应的DNS记录缓存30min。</p><blockquote><p>微软支持页面链接：<a href="https://support.microsoft.com/en-us/topic/how-internet-explorer-uses-the-cache-for-dns-host-entries-33d93ec9-e4fa-1557-4e9c-83517fed474f" target="_blank" rel="noopener noreferrer">How Internet Explorer uses the cache for DNS host entries</a></p></blockquote></li><li><p>实际测试中，发现IE4.x版本，在首次请求后的30min内，仍有可能发起新的DNS请求。</p></li></ol><h2 id="_3-1-首次访问" tabindex="-1"><a class="header-anchor" href="#_3-1-首次访问"><span>3.1 首次访问</span></a></h2><h4 id="测试结论-4" tabindex="-1"><a class="header-anchor" href="#测试结论-4"><span>测试结论</span></a></h4><ol><li><p><strong>客户端向服务器发起DNS请求，浏览器及操作系统分别会生成各自的缓存记录。</strong></p></li><li><p><strong>浏览器缓存时间为60S</strong></p></li><li><p><strong>操作系统读取NS记录的TTL值，并非具体A记录的TTL值。</strong></p></li><li><p><strong>更正：操作系统读取的TTL值，是选取NS、A记录中TTL值较短的一个，并非是固定的NS或者A记录的TTL值。</strong></p></li></ol><h4 id="测试过程-7" tabindex="-1"><a class="header-anchor" href="#测试过程-7"><span>测试过程</span></a></h4><ol><li><p>通过浏览器打开http://a1.test.com，进行访问；</p></li><li><p>通过Wireshark抓包工具确认，客户端向DNS服务器发起了DNS请求，并获取到了相应记录；</p></li><li><p>通过DNS服务器tail log确认，服务端收到了客户端请求，并返回相应记录值；</p></li><li><p>通过ipconfig /displaydns查看，系统出现了t1.test.com的DNS缓存；</p></li><li><p>通过chrome浏览器chrome://net-internals#dns，查看浏览器对于域名的缓存记录及时间。</p></li></ol><h3 id="_3-2-在30首次请求后的30分钟内刷新或打开新的tab" tabindex="-1"><a class="header-anchor" href="#_3-2-在30首次请求后的30分钟内刷新或打开新的tab"><span>3.2 在30首次请求后的30分钟内刷新或打开新的TAB</span></a></h3><p>####　测试结论</p><ol><li><strong>30分钟内，有可能会重新发起新的DNS请求。具体间隔或触发条件待确认。</strong></li></ol><h4 id="测试过程-8" tabindex="-1"><a class="header-anchor" href="#测试过程-8"><span>测试过程</span></a></h4><blockquote><ol><li>通过Wireshark抓包工具确认，客户端未发起新的DNS请求；</li><li>通过DNS服务器tail log确认，服务端未收到新的DNS请求；</li><li>通过ipconfig /displaydns查看，系统中t1.test.com的DNS缓存TTL值仍使用上次使用的TTL倒计时；</li><li>通过chrome浏览器chrome://net-internals#dns，查看浏览器对于域名的缓存记录及时间。</li></ol></blockquote><h2 id="场景四-ie11" tabindex="-1"><a class="header-anchor" href="#场景四-ie11"><span>场景四 IE11</span></a></h2><h2 id="待测试项目" tabindex="-1"><a class="header-anchor" href="#待测试项目"><span>待测试项目</span></a></h2><ul><li>Chrome69，先在系统生成环境，再打开浏览器，查看，浏览器是读取系统缓存还是主动发起；</li><li>IE，调整记录的TTL时间，刷新确认，浏览器最大的可缓存时间</li><li>Chrome&gt;99版本，进行实际测试。相应版本已经无法通过chrome://net-internals#dns进行查看自身缓存，仅能通过实际测试证明</li><li>Firefox浏览器</li><li>Microsoft支持网站所提供的修改IE缓存时间的方法，目前测试不可用。</li><li>操作系统所配置的DNS并非所要请求记录的权威DNS，请求过程中存在递归或迭代。此时，客户端是否无法获取所要请求域名的NS记录的值及其TTL，那么此时，客户端所缓存的A记录的TTL值是否就应该为真实的所为其配置的TTL时间。</li></ul>',72)]))}const p=a(n,[["render",s]]),d=JSON.parse('{"path":"/os/dns/%E6%B5%8F%E8%A7%88%E5%99%A8DNS%E7%BC%93%E5%AD%98.html","title":"浏览器对于DNS的缓存","lang":"zh-CN","frontmatter":{"index":true,"icon":"dns","title":"浏览器对于DNS的缓存","author":"犄角蛙","date":"2022-06-13T00:00:00.000Z","category":["DNS"],"tag":["dns","浏览器","缓存"]},"git":{"createdTime":1655253854000,"updatedTime":1741239190000,"contributors":[{"name":"00D2","username":"00D2","email":"shijinguosjg@gmail.com","commits":7,"url":"https://github.com/00D2"}]},"readingTime":{"minutes":9.18,"words":2755},"filePathRelative":"os/dns/浏览器DNS缓存.md","excerpt":"<h2>基础测试环境</h2>\\n<ul>\\n<li>\\n<p>操作系统</p>\\n<ul>\\n<li>Windows 7</li>\\n</ul>\\n</li>\\n<li>\\n<p>抓包工具</p>\\n<ul>\\n<li>Wireshark</li>\\n</ul>\\n</li>\\n<li>\\n<p>浏览器</p>\\n<ul>\\n<li>IE8</li>\\n<li>Chrome59</li>\\n<li>Chrome69</li>\\n</ul>\\n</li>\\n<li>\\n<p>DNS服务器配置</p>\\n<ul>\\n<li>根据不同场景，调整NS、A等记录的TTL值</li>\\n</ul>\\n</li>\\n</ul>\\n<p>备注：</p>\\n<blockquote>\\n<p>每次新场景测试前，均清除缓存。</p>\\n<ul>\\n<li>关闭浏览器，清除缓存</li>\\n<li>使用ipconfig /flushdns清除系统DNS缓存</li>\\n<li>通过ipconfig /displaydns确认系统当前无相关DNS缓存记录</li>\\n</ul>\\n</blockquote>"}');export{p as comp,d as data};
