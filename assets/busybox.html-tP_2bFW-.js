import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as n,e}from"./app--hyDAsmK.js";const o={},c=e(`<h1 id="busybox" tabindex="-1"><a class="header-anchor" href="#busybox" aria-hidden="true">#</a> busybox</h1><h2 id="如何运行一个busybox容器" tabindex="-1"><a class="header-anchor" href="#如何运行一个busybox容器" aria-hidden="true">#</a> 如何运行一个busybox容器</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> busybox
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="如何使通过docker-compose部署的busybox一直保持运行状态" tabindex="-1"><a class="header-anchor" href="#如何使通过docker-compose部署的busybox一直保持运行状态" aria-hidden="true">#</a> 如何使通过docker-compose部署的busybox一直保持运行状态</h2><p>通过增加一个不中断运行的command命令，则可以使busybox一直处于运行状态。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">busybox</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox
    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox
    <span class="token key atrule">command</span><span class="token punctuation">:</span> tail <span class="token punctuation">-</span>f /dev/null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),t=[c];function i(l,r){return a(),n("div",null,t)}const p=s(o,[["render",i],["__file","busybox.html.vue"]]);export{p as default};
