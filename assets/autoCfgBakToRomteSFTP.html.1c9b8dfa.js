import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";import{o as n,c as a,e}from"./app.25cd8b3f.js";const t={},p=e(`<blockquote><p><strong>\u8BE5\u811A\u672C\u76EE\u6807\u53EF\u5B9E\u73B0\u7684\u6548\u679C\u4E3A\uFF1A</strong></p><ol><li>\u5224\u65ADHA\u53CC\u673A\u914D\u7F6E\u662F\u5426\u662F\u540C\u6B65\u72B6\u6001;</li><li>\u5982\u4E0D\u540C\u6B65\u53EF\u8FDB\u884CHA\u4E3B\u5907\u673A\u5224\u65AD\uFF0C\u5E76\u8FDB\u884C\u914D\u7F6E\u540C\u6B65;</li><li>\u914D\u7F6E\u540C\u6B65\u5B8C\u6210\u540E\u751F\u6210ucs\u914D\u7F6E\u6587\u4EF6\uFF08\u6587\u4EF6\u547D\u4EE4\u683C\u5F0F\u4E3A\u8BBE\u5907\u4E3B\u673A\u540D\uFF09\uFF1B</li><li>\u5C06\u914D\u7F6E\u6587\u4EF6\u901A\u8FC7SCP\u65B9\u5F0F\u4F20\u9001\u81F3\u8FDC\u7AEF\u670D\u52A1\u5668;</li><li>\u5728\u6587\u4EF6\u4F20\u8F93\u5B8C\u6210\u540E\uFF0C\u5220\u9664\u672C\u5730\u7684\u6587\u4EF6\u3002</li><li>\u642D\u914Dcrontab\u5B9E\u65F6\u914D\u7F6E\u7684\u5B9A\u65F6\u4FDD\u5B58\u53CA\u4E0A\u4F20\u3002</li></ol><p><strong>\u811A\u672C\u672A\u5B8C\u6210\u53CA\u6D4B\u8BD5\u7684\u90E8\u5206\uFF1A</strong></p><ol><li>\u5F85\u6D4B\u8BD5N+M\u96C6\u7FA4\u65F6\u7684\u540C\u6B65\u72B6\u6001\u5224\u65AD</li></ol><p><strong>\u9002\u7528\u7248\u672C</strong> \u8BE5\u811A\u672C\u4EC5\u5728BIGIP V15\u7248\u672C\u8FDB\u884C\u4E86\u6D4B\u8BD5\uFF0C\u5176\u4ED6\u7248\u672C\u672A\u6D4B\u8BD5\u3002</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token assign-left variable">statusFile</span><span class="token operator">=</span>/var/prompt/ps1  <span class="token comment">#\u8BBE\u5907\u4E3B\u5907\u673A\u72B6\u6001</span>
<span class="token assign-left variable">configSyncStatusFile</span><span class="token operator">=</span>/var/prompt/cmiSyncStatus  <span class="token comment">#\u8BBE\u5907\u914D\u7F6E\u662F\u5426\u540C\u6B65</span>
<span class="token assign-left variable">deviceGroup</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>tmsh list cm device-group one-line <span class="token operator">|</span> <span class="token function">grep</span> sync-failover <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39; &#39;</span> -f3<span class="token variable">)</span></span>  <span class="token comment">#\u83B7\u53D6\u8BBE\u5907HA\u7EC4\u540D</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -r <span class="token variable">$configSyncStatusFile</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">read</span> configSyncStatus <span class="token operator">&lt;</span> <span class="token variable">$configSyncStatusFile</span><span class="token punctuation">;</span>
<span class="token keyword">fi</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$configSyncStatus</span> <span class="token operator">=</span> <span class="token string">&quot;In Sync&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">then</span> 
    tmsh save sys ucs <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>
        <span class="token comment">#expect\u4EA4\u4E92\u811A\u672C\uFF0C\u7528\u4E8ESCP\u4E0A\u4F20\u65F6\u7684\u5BC6\u7801\u8F93\u5165\u4EA4\u4E92\u3002</span>
        /usr/bin/expect <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
        set timeout 30
        spawn bash -c &quot;scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /var/local/ucs/<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>.ucs root@1.1.1.1:/opt/dev-autobak/cfg/&quot;
        expect &quot;*password:&quot; {send &quot;111111<span class="token entity" title="\\r">\\r</span>&quot;} 
        expect eof
EOF</span>
    
    <span class="token function">rm</span> -f /var/local/ucs/<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>.ucs
<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$configSyncStatus</span> <span class="token operator">=</span> <span class="token string">&quot;Changes Pending&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">then</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> -r <span class="token variable">$statusFile</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">read</span> status <span class="token operator">&lt;</span><span class="token variable">$statusFile</span>
        <span class="token keyword">fi</span>

        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$status</span> <span class="token operator">=</span> Standby <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">then</span> 
            tmsh run cm config-sync from-group <span class="token variable">$deviceGroup</span>   <span class="token comment">#\u5982\u679C\u914D\u7F6E\u4E0D\u540C\u6B65\uFF0C\u4E14\u672C\u673A\u662F\u5907\u673A\u65F6\uFF0C\u4E14\u914D\u7F6E\u540C\u6B65\u662F\u4ECE\u7EC4\u5230\u672C\u8BBE\u5907\u3002</span>
            tmsh save sys ucs <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>
                <span class="token comment">#expect\u4EA4\u4E92\u811A\u672C\uFF0C\u7528\u4E8ESCP\u4E0A\u4F20\u65F6\u7684\u5BC6\u7801\u8F93\u5165\u4EA4\u4E92\u3002</span>
                /usr/bin/expect <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
                set timeout 30
                spawn bash -c &quot;scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /var/local/ucs/<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>.ucs root@1.1.1.1:/opt/dev-autobak/cfg/&quot;
                expect &quot;*password:&quot; {send &quot;111111<span class="token entity" title="\\r">\\r</span>&quot;} 

                expect eof
EOF</span>
    
            <span class="token function">rm</span> -f /var/local/ucs/<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>.ucs
        <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$status</span> <span class="token operator">=</span> Active <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">then</span> 
            tmsh run cm config-sync to-group <span class="token variable">$deviceGroup</span>   <span class="token comment">#\u5982\u679C\u914D\u7F6E\u4E0D\u540C\u6B65\uFF0C\u4E14\u672C\u673A\u662F\u5907\u673A\u65F6\uFF0C\u4E14\u914D\u7F6E\u540C\u6B65\u662F\u4ECE\u672C\u8BBE\u5907\u5230\u7EC4\u3002</span>
            tmsh save sys ucs <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>
                <span class="token comment">#expect\u4EA4\u4E92\u811A\u672C\uFF0C\u7528\u4E8ESCP\u4E0A\u4F20\u65F6\u7684\u5BC6\u7801\u8F93\u5165\u4EA4\u4E92\u3002</span>
                /usr/bin/expect <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
                set timeout 30
                spawn bash -c &quot;scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /var/local/ucs/<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>.ucs root@1.1.1.1:/opt/dev-autobak/cfg/&quot;
                expect &quot;*password:&quot; {send &quot;111111<span class="token entity" title="\\r">\\r</span>&quot;} 
    
                expect eof
EOF</span>
    
            <span class="token function">rm</span> -f /var/local/ucs/<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>.ucs
        <span class="token keyword">else</span>
            <span class="token builtin class-name">exit</span>
        <span class="token keyword">fi</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$configSyncStatus</span> <span class="token operator">=</span> <span class="token string">&quot;Standalone&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">then</span>
    tmsh save sys ucs <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>
        <span class="token comment">#expect\u4EA4\u4E92\u811A\u672C\uFF0C\u7528\u4E8ESCP\u4E0A\u4F20\u65F6\u7684\u5BC6\u7801\u8F93\u5165\u4EA4\u4E92\u3002</span>
        /usr/bin/expect <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
        set timeout 30
        spawn bash -c &quot;scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /var/local/ucs/<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>.ucs root@1.1.1.1:/opt/dev-autobak/cfg/&quot;
        expect &quot;*password:&quot; {send &quot;111111<span class="token entity" title="\\r">\\r</span>&quot;} 

        expect eof
EOF</span>
    
    <span class="token function">rm</span> -f /var/local/ucs/<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOSTNAME</span> <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">&#39;.&#39;</span> -f1<span class="token variable">)</span></span>.ucs
<span class="token keyword">else</span>
    <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),l=[p];function o(c,i){return n(),a("div",null,l)}var k=s(t,[["render",o],["__file","autoCfgBakToRomteSFTP.html.vue"]]);export{k as default};
